// Code generated by go-bindata.
// sources:
// frontend/application.coffee
// frontend/application.js
// frontend/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontendApplicationCoffee = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x54\x4d\x4f\xdc\x30\x10\xbd\xe7\x57\x8c\xb2\x48\x4e\x24\x08\x8b\x7a\x43\xb0\x95\x8a\x54\x09\xa9\x07\x54\xd1\x5e\x91\x49\x26\xac\x4b\x62\x47\xf6\x24\x74\x85\xf8\xef\x1d\xc7\x09\x78\xd9\x70\xe2\xd0\xd3\xc6\xf3\xde\x7c\xbf\xd9\x23\x38\xd9\x24\x00\x8d\x91\xd5\x6f\xb4\x4e\x19\x9d\xe5\xfc\x3e\xca\xc4\xaa\x6b\xe4\x4e\xe4\xc5\xbd\xd2\x15\x88\xb2\x51\xe5\xa3\x38\x06\x6f\xfc\xd6\x13\x19\x7d\xe5\x2d\x13\xd5\x91\xe9\x0e\xa8\xde\xb8\x40\x45\x69\xcb\xed\xb5\xee\x7a\x7a\xf5\x78\xc4\x5d\x65\x9e\x34\xfb\x64\x79\xa8\x07\xa0\x6c\x98\x78\xab\x5a\x34\x3d\x65\x4f\x4c\x33\x4f\x45\xe4\xeb\x11\x9b\x8f\xcc\x0f\x40\xb8\x04\x87\x34\x45\x80\x18\xdd\x75\x78\x0c\x67\xeb\xf5\x7a\x6a\xfc\xbb\x1c\x8c\x55\x84\x8e\x5b\x4f\xde\x55\xcd\x51\xe6\x9a\x5c\x7f\xdf\x2a\xba\xe1\x01\x80\x30\x75\x2d\xd8\x54\xcb\xc6\x61\x92\xbc\x1b\x4a\xe4\xd3\xdb\x86\x5f\xbe\x6f\xfe\x9a\x9b\x1e\x64\x33\x0e\x39\x0a\xc8\xe8\x5b\xb8\xc8\xce\x91\x18\x9a\x82\x1d\x15\x9d\x71\x04\xe2\x74\x38\x3b\x1d\x97\x73\x3c\xf6\xef\xc8\xa2\x6c\xcf\xa7\x18\x3c\xc3\x4a\x92\x7c\x9d\xe3\x61\x6e\x10\x82\x73\xec\xcf\x23\x6e\x73\x44\xd8\xb0\xb4\xaf\xb9\x74\x55\x4f\xbc\xa2\x41\xfd\x40\x5b\xb8\x80\x2f\x63\x3a\x8b\xd4\x5b\x9d\xc4\x71\x50\x97\xa6\xc2\x5f\x3f\xaf\xaf\x4c\xdb\x19\x8d\x9a\xb2\x80\x8d\x42\x2b\x1e\x90\x20\xf5\x2d\x05\xe3\xd7\xf0\x73\xb9\x7a\x0e\x1f\x2f\xe9\x52\x47\x8e\x24\xb1\x56\x7f\x28\xe7\xab\xc2\xb6\xa3\x5d\x16\xd4\x50\x1b\xcb\x19\xc9\xee\x40\x69\xf0\x7e\xa3\x15\x40\x8e\x7b\x48\x2f\xe4\x66\xf5\x3c\xe2\x2c\x18\x3b\xa0\xbd\xd3\xb2\xc5\x97\x8b\x53\xb9\x49\xf3\x99\x5a\x48\x22\x0b\x62\x6b\xb1\x66\x4d\x8a\x3f\x72\x90\xae\xb4\xaa\xa3\xf3\xc1\xa8\x2a\x5b\xe7\xe2\x1d\xb3\x6c\xa4\x73\x9e\xda\x70\x41\x27\x0f\xd6\xf4\xdd\x09\x0b\xaa\x7d\xe3\xf9\x4a\x40\xf0\x22\x98\x15\xd2\x7b\x2a\xea\xbb\xb0\xb5\x40\xda\xbf\x1f\x46\x7c\x7f\xf3\xf1\x4c\xf9\xba\x0e\x75\x75\x6b\x0e\xa7\x90\x24\xb1\xc3\x82\x06\x69\xab\x5c\x1e\x15\x72\xa8\xc0\x64\xef\x1a\xa2\x10\xd1\x96\xea\x19\x3e\xd8\x0b\x6b\xc2\xbf\x67\x45\x6c\x60\x3d\x55\xed\x4b\x9d\xdd\x6e\xa4\xc6\x86\x57\x66\xb1\x35\x03\x5e\xf9\xb9\x65\xe9\x56\x55\x15\xea\x69\xfe\xe8\x6f\xe0\x63\x47\x59\x55\x4b\x5e\x31\xf5\x53\xaa\xf8\x5f\x72\xf8\x8c\x0e\xf6\x1b\x0f\x6b\x9c\xfe\xcd\x97\x97\x38\x04\x70\xe1\xb4\xd2\xd5\x8c\xe5\x05\xe1\x5f\x0a\x78\xf2\x2f\x00\x00\xff\xff\xf1\xea\x29\x43\x27\x06\x00\x00")

func frontendApplicationCoffeeBytes() ([]byte, error) {
	return bindataRead(
		_frontendApplicationCoffee,
		"frontend/application.coffee",
	)
}

func frontendApplicationCoffee() (*asset, error) {
	bytes, err := frontendApplicationCoffeeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/application.coffee", size: 1575, mode: os.FileMode(420), modTime: time.Unix(1439493861, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _frontendApplicationJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x06\x8e\x01\x51\x88\x23\x3b\xc8\x69\xe3\x24\x0b\xac\x81\x5d\x04\xd8\x43\xb0\x9b\xf6\x12\x14\x01\x23\x8d\x62\x36\x12\x29\x50\x94\x52\xa3\xf0\xbf\x77\x28\x51\x36\x65\xd9\x6d\x8a\xf6\x90\x93\x18\xe9\xcd\xcc\x9b\x37\x6f\x18\xcf\x66\xf0\x0f\x4a\xd4\xdc\x60\x02\x4f\x6b\x58\xaa\x34\x45\xfc\x3f\xd6\xa2\x30\x70\x1e\xfd\x11\x5d\x8c\x58\x5a\xc9\xd8\x08\x25\x59\x08\x5f\x47\x00\x35\xd7\x90\x29\x9e\xfc\xcd\x6b\xa5\x85\xc1\x72\xda\xfc\xf9\x11\x75\x49\xa0\x29\x14\x19\x5f\xff\x55\x19\xa3\xe4\x32\x13\xf1\xcb\x14\x4a\xe4\x3a\x5e\xdd\xca\xa2\x32\xf7\xeb\x02\xe9\x85\x51\x45\x1f\x51\x3d\xe5\xc2\xdc\x51\xe0\x14\x2a\x9d\xfd\x2b\x4a\xd3\x7c\x59\x8c\xa8\xde\x64\x9f\x00\xf8\xf5\x58\xb8\x68\x5e\x4d\x58\x70\x62\x2b\x07\x61\xf4\x24\x64\xc2\x82\xd8\x26\x08\x06\x74\x3c\xb8\xa5\x31\x80\xef\x71\xf3\xe1\xbb\x36\xb6\x51\x2f\xb8\x4e\xd4\xab\xa4\xb8\x01\x47\x80\x38\xa3\x88\x7b\x91\xa3\xaa\x0c\x7b\x25\xbc\x7a\x8d\x7c\x2d\xe8\x8b\x76\xf9\x01\x34\x9a\x4a\x4b\x38\x02\x83\x6b\x52\xd1\x74\xb9\x06\x82\x9e\xcf\xe7\x73\x97\x69\xe3\x9e\x2e\x5f\x6f\x50\xad\x56\x16\x41\x8f\xbd\x46\xa9\xc2\xa0\x85\xdd\x58\x58\x40\xbe\x08\xfa\xa9\x53\x9e\x95\xd8\x24\x6c\xf2\xed\xe9\x7c\x28\x9f\x75\x0e\x8d\xb7\xcd\x42\x07\xc2\x58\x61\xe9\xd4\xa9\x5a\xf3\xac\x1b\xa8\x57\x9c\x00\xdf\x2d\xbd\x83\xfa\x55\x6d\x94\x2b\xec\xc2\x26\x51\xa1\x4a\xc3\x82\x59\x7d\x3e\x6b\xbc\x32\xdd\xce\xaa\x34\x1a\x79\x7e\x69\x59\xb5\x32\x7a\x13\x4d\xb8\xe1\xbb\xa9\x76\xb9\x86\xc4\x83\xa0\x37\x03\xc7\xad\x3f\xab\x63\xb2\xb4\x30\xd7\x79\x73\x76\xe2\xf4\x5d\xe7\xe9\x23\x52\x70\x46\x88\x32\x94\xcf\x66\x05\x57\x70\xb1\x4f\xd3\xf1\xe9\xa7\x45\x19\xab\x04\x3f\xfc\x77\xbb\x54\x79\xa1\x24\xca\xce\x51\x7d\x91\x27\xd1\x33\x1a\x36\xb6\x62\xb5\x9f\xff\x6c\x1f\xd7\x63\x38\x75\xc9\x8e\x8a\x64\x5b\xe2\x53\xaa\x64\x34\xad\xb4\xa0\x1b\x02\xe9\x66\xd0\x58\x56\x99\x29\x3b\xcb\xb7\x3b\xc8\x6d\xb8\xdd\x78\x6a\x0f\xf3\xc2\xac\x99\xb7\x13\x0d\x9e\x28\x3f\x7c\xea\xde\xa5\x4a\x03\x13\xf4\x6a\xde\x24\xa5\x83\xad\xec\x24\x58\x80\x20\x15\xe8\x4c\x87\xd3\xd3\x1d\x1d\x68\x99\x38\xf0\x83\xd8\x66\x03\xe0\x8d\xce\xe3\x2b\x7e\x63\xdb\x6a\x60\xb4\x7d\xba\x46\xfd\x28\x79\x8e\xf4\x6e\x7c\x35\xa3\x8f\xa1\x17\x12\x71\x63\x34\x0b\x56\x1a\x53\xb2\x50\xf0\x99\xd7\xbc\x6c\x6e\xcc\xcb\x5a\x89\x84\xcd\xc3\xe0\x00\x3a\xce\x78\x59\x5a\x78\x46\xbd\x9e\x3d\x6b\x55\x15\x67\xb4\x94\x79\x1f\x6b\xf9\xb1\x80\x8c\x15\x38\xf5\x22\x0b\x47\xf9\xb8\xdb\x81\x16\xd8\xbf\xb5\xfc\x4b\xd3\x83\x39\x01\xa3\xa2\x2a\x57\x8c\x88\x14\x05\xca\xe4\x5e\xb1\x81\xf2\xe1\x36\x68\xd3\xb7\x79\x6f\x64\xbe\xaf\xfd\x8a\x6f\xde\x75\xb3\x12\x65\xe8\xf5\xd8\x37\xdc\x81\x8d\x6f\x6b\xf5\x2e\xb1\x43\xc5\x86\x8e\x4d\x3b\xf8\xf8\xd7\x3c\x6a\xb7\xcc\x33\x18\xdc\xc0\xdc\xb7\x95\x15\xb2\x2b\x75\xc7\x25\x52\x4b\x91\xc6\x5c\xd5\xb8\xb4\xe3\x66\xe3\x95\x48\x12\x94\x3b\xf7\x6c\x00\xe9\xea\xfa\x41\x06\x9e\x24\xc7\xc2\x47\xc3\xa8\xf7\xb5\x3b\xef\x63\x69\x7e\xfb\xb6\xf4\xc5\xfe\xf9\x75\xf1\x7e\xb1\xbc\xcd\xc0\x75\x0b\x3e\x6e\xdf\xed\xff\xa1\xf1\x49\x87\x0d\x23\x83\x5f\x4c\x8b\xdb\xa7\xb0\x09\xa3\x98\x67\x59\xbb\x82\x8b\xd1\xb7\x00\x00\x00\xff\xff\x8e\xe1\xe2\x12\xf8\x09\x00\x00")

func frontendApplicationJsBytes() ([]byte, error) {
	return bindataRead(
		_frontendApplicationJs,
		"frontend/application.js",
	)
}

func frontendApplicationJs() (*asset, error) {
	bytes, err := frontendApplicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/application.js", size: 2552, mode: os.FileMode(420), modTime: time.Unix(1439493897, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _frontendIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\xdb\x72\xdb\x36\x13\xbe\xcf\x53\x6c\xf8\x5f\x24\xf1\x84\xe4\xef\x38\x69\x5d\x87\xca\x4c\x9a\xa6\xad\x3a\x69\xea\xda\xc9\xb4\x9d\x4c\x2e\x20\x62\x49\xc2\x01\x01\x06\x00\x65\xb3\x57\x7d\x9a\x3e\x58\x9f\xa4\x0b\x90\x94\x28\x59\xca\x38\x87\xe9\x85\x2d\x1c\x76\xbf\xfd\x76\xb1\x0b\x2c\xb3\xdb\xdf\xfd\xf2\xec\xd5\x1f\xa7\xcf\xa1\x72\xb5\x7c\x72\x2b\xf3\x3f\x20\x99\x2a\x67\x11\xaa\xe8\xc9\x2d\x80\xac\x42\xc6\xfd\x80\x86\x35\x3a\x06\x79\xc5\x8c\x45\x37\x8b\x5a\x57\xc4\xc7\xd1\x74\xab\x72\xae\x89\xf1\x7d\x2b\x96\xb3\xe8\xf7\xf8\xf5\xd3\xf8\x99\xae\x1b\xe6\xc4\x42\x62\x04\xb9\x56\x0e\x15\xe9\xcd\x9f\xcf\x90\x97\xb8\xa1\xa9\x58\x8d\xb3\x68\x29\xf0\xb2\xd1\xc6\x4d\x84\x2f\x05\x77\xd5\x8c\xe3\x52\xe4\x18\x87\xc9\x7d\x10\x4a\x38\xc1\x64\x6c\x73\x26\x71\x76\x38\x02\xdd\x8e\x63\x78\x55\x21\xb0\x85\x5e\x22\x1c\x41\x00\x76\xac\xb4\x70\x50\xb7\xd6\x1d\x10\x68\x8d\x50\x08\x63\x1d\x41\x80\x23\x51\xef\xdb\x63\x60\xaa\x03\x4d\x53\x13\xe6\xa3\x6d\xf0\x4a\xbd\xce\x01\x2b\x1c\x9a\x03\xaf\x62\xb1\x87\x8c\xe3\xc1\xaa\x13\x4e\xe2\x93\x33\xc6\x85\x3e\x9d\x67\x69\x3f\xbd\xb5\x66\xf4\xad\xd6\xce\x3a\xc3\x9a\xb5\x8a\x14\xea\x1d\x18\x94\xb3\xc8\xba\x4e\xa2\xad\x10\xc9\xe5\xca\x60\x31\x8b\x7c\x08\xed\x49\x9a\xd6\xec\x2a\xe7\x2a\x59\x8c\xda\x7e\x42\x5c\xd2\xd5\x42\x7a\x94\x1c\x25\x0f\xd3\xdc\xda\xf5\x5a\x52\x0b\x92\xb2\x36\xfa\x08\x43\x41\xf9\x92\xb9\xbc\x0a\xf8\x9c\x99\x77\xb2\xdb\x09\xb9\xf6\xe9\xc7\x57\x3f\xbf\x78\x04\xb6\x12\x35\xc5\x8e\xc3\x19\xda\x46\x2b\x9e\x5c\x58\x28\xb4\x81\xf9\xf3\x63\xb0\x6d\xe3\x0f\x12\x74\x31\x08\xa3\xc4\x9a\x82\x6a\x83\x42\x8d\x5c\x30\x78\xdf\xa2\x11\x38\x09\xa5\x87\xfe\xed\xe9\xd9\xcb\xf9\xcb\x1f\x4e\xa6\xa0\x5c\xa3\x55\x77\x1c\x5c\x6a\xf3\x0e\x44\x01\x9d\x6e\xc1\xa7\x4a\x38\xc2\x86\x95\x48\x33\x46\x07\x2b\x91\xfc\xd9\x80\x7b\x43\xd2\xd2\x11\x23\xf8\xe6\x6d\xbf\x4a\xeb\x36\x37\xa2\x71\x60\x4d\xbe\x8e\x82\xb6\x36\x19\x42\xee\xa3\xe0\xcb\xe0\x11\xf9\xb7\xa4\x28\x7f\x9d\x3c\x58\xcf\x43\x38\x2e\x28\x1a\x59\xda\xc3\x7c\x0c\xaa\xe9\x5d\x4a\x0f\x93\x87\x84\x39\xcc\xf6\x20\x66\xb7\xdf\xa0\xe2\xa2\x78\xdb\xbb\x93\xa5\x63\x19\x66\x0b\xcd\xbb\x41\x46\xb1\x25\xe4\x92\x59\x3b\x8b\x68\xb8\x60\x06\xfa\x9f\x98\x63\xc1\x5a\xe9\xa2\x15\x3b\x2e\x56\x92\x3e\xbd\x99\x50\x68\xe2\x42\xb6\x82\xaf\x64\xc6\x7c\x35\xfe\x84\xfc\x9f\xd3\x65\x29\x11\x4a\x74\x50\x1a\xdd\x36\xc8\xc3\xf1\x2e\xd0\x51\x31\x40\xad\x17\x14\x70\xe0\xc2\x36\x92\x75\xab\xa8\x6f\x5b\x1b\x08\x79\xf6\x68\x26\xb6\x48\x8a\x6d\xc9\x2c\xbc\xe5\x31\x3d\xff\x17\xad\x6b\x8a\x4d\xa0\x53\xc2\x5e\x79\x15\x26\x81\x75\x9a\x6c\xb9\xb5\x4e\x83\x94\xe0\xc7\xe4\xdd\x15\x86\x3d\x41\x92\xf1\x95\x8d\x0f\x1f\x80\x1f\xd9\x3a\x3e\x1e\x07\xba\x28\xe8\xf6\x8b\xfb\x8d\x9a\xc7\x5f\x8d\x83\x61\xe3\x68\xac\x94\x6d\xc8\x86\x29\x94\x10\xfe\x5f\x3b\x9f\x9d\xb2\x21\x68\x42\x95\x1b\x52\x00\xa7\x3e\xdc\x54\x02\x06\xce\x9d\x41\x56\xc7\xaf\xcf\x5e\x24\x49\x32\x45\x9a\x06\x69\x37\xb4\x4f\xa2\x2d\xdc\x8c\x0e\xb7\xde\x5c\xda\xd4\xf4\xfb\x71\xc8\x84\x68\x5b\xcc\xdf\x35\x6c\x41\xee\x0d\xa2\xd6\xc4\x5a\xc9\x2e\xf2\x09\x43\x0f\x85\x91\x73\xd5\xb4\xe4\x6e\xcf\x18\x88\x71\x96\x06\x85\x1d\x40\x13\x8b\xc2\x6b\xed\x35\x49\xb2\x41\x00\x5c\xd7\xd0\xe3\xe1\xf0\xca\x3f\x1c\x13\xae\xfe\x88\x8d\x96\x11\x08\x3e\x21\x01\x94\xaf\x39\x56\x5a\x52\x42\xce\xa2\x35\xa3\xdd\x16\x2c\xc5\x6b\x07\x9d\x78\xe1\xd4\x4e\x05\x5f\xa0\xad\x73\x7a\xa5\x44\x82\x40\x7f\xab\x23\x0f\x64\x7c\xc9\x50\xc5\x4f\xc1\x4b\xd9\x35\x95\x20\xca\xb0\x1a\xc5\x13\x31\xba\x1e\x7a\xdc\x4f\x37\x6a\x9d\x6e\x6e\x60\x74\x22\xf6\x41\xa3\x74\x5f\x79\x91\xeb\x07\xb8\x9d\x7d\x7b\x16\xb3\x74\x3b\xe1\xb6\x84\xfa\x29\x0c\xf5\xdd\x97\x8f\xaf\xea\x9b\x56\x17\x54\x82\x73\xea\x62\x82\xf3\x05\x5b\x6a\x23\x1c\x9e\x7a\x89\x4f\xaa\xbb\xef\x07\x04\xfb\xcf\x5f\x7f\x7f\x7e\xb1\x4d\x84\xa4\xb0\x63\x92\x6f\x50\x7d\x41\xeb\xdb\x6a\xd7\x8c\x7d\xd9\x90\x7d\x52\x60\xce\x91\x99\xbc\x0a\x6f\x43\x5f\x4d\xd6\xb7\x57\xf3\x1c\x9f\x31\x6a\xa0\xb8\x30\x98\x3b\x6d\xba\x2f\x12\xb6\xff\xe2\x8e\xea\xdd\xb1\xc1\x15\x22\xbd\xff\xa6\xfa\x88\xdb\xc7\x06\xd0\x9d\x17\x50\x6f\xee\x7c\x34\x77\x8d\xf7\x07\x4a\xe7\xc6\x29\x65\x1d\x75\xe1\x5a\xed\xcf\xa8\xcf\x49\xa9\x06\x42\x77\xd9\xc7\x20\x66\x52\x94\xea\x24\xa7\x5e\x0f\xcd\xe3\x82\x62\x10\x5b\xf1\x27\x9e\xfc\x3f\x39\xc6\xfa\xf1\x86\xf1\xe1\x7d\x1f\xee\x58\x4f\x73\x89\xc6\x12\xcd\xd0\x0b\x6d\xdc\x2d\x59\xda\xac\x2c\x6e\x12\xa2\xc7\x77\xf2\xd4\x6f\xee\x0c\x0f\xfc\x9a\x6e\xd8\xb9\xf8\x95\xfa\xce\x0e\xee\x2a\xcc\xd1\x5a\x46\x43\x9f\xb9\xab\x36\xfd\x8e\x85\x9f\xd8\x92\x9d\xf7\xed\x5c\x23\xdb\x52\x28\x7b\x6f\x6d\x63\x57\x9f\xc7\x2e\xd8\x55\x52\x6a\x4d\xed\x12\x6b\x84\x0d\xcd\x9e\x5f\x4b\xa5\x58\xd8\xf4\xc2\x37\xba\x1d\x75\x7d\x87\x87\xd4\xf6\xf5\xb3\xbd\x5d\x1f\x11\x9c\xab\x5c\xb6\x9c\xbe\x63\xa4\xf4\x9f\x1f\x0d\xb5\x59\x7c\x24\x02\x77\x29\x15\xf5\xe5\xbd\xfb\x40\x9c\xc5\x20\x28\xa8\x51\x5c\x0a\xde\x32\x19\x9a\x60\xea\xb1\x2d\x28\x44\x8e\xfc\xc3\xb4\x6f\xfa\x8d\x71\xb1\xfd\x89\xb1\x83\xf8\x14\x9f\x35\x8d\x14\x79\xc8\xb8\x6b\xa2\xf4\xa2\x84\xfe\x35\x4b\xfb\x2f\xce\x7f\x03\x00\x00\xff\xff\xe8\xec\x4c\xa2\x82\x0e\x00\x00")

func frontendIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontendIndexHtml,
		"frontend/index.html",
	)
}

func frontendIndexHtml() (*asset, error) {
	bytes, err := frontendIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/index.html", size: 3714, mode: os.FileMode(420), modTime: time.Unix(1439493809, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend/application.coffee": frontendApplicationCoffee,
	"frontend/application.js": frontendApplicationJs,
	"frontend/index.html": frontendIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"frontend": &bintree{nil, map[string]*bintree{
		"application.coffee": &bintree{frontendApplicationCoffee, map[string]*bintree{
		}},
		"application.js": &bintree{frontendApplicationJs, map[string]*bintree{
		}},
		"index.html": &bintree{frontendIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

